---
description: 
globs: 
alwaysApply: true
---
---
description: 
globs: 
alwaysApply: true
---
 # Python 프로젝트 공통 규칙

## 개발 환경
- Python 3.10 이상 버전을 사용합니다.
- Poetry를 사용하여 의존성을 관리합니다.
- 가상 환경을 사용하여 프로젝트별 의존성을 격리합니다.
- mypy를 사용한 정적 타입 검사를 활용합니다.
- pre-commit을 사용하여 코드 품질을 유지합니다.

## 코드 구조
```
프로젝트/
├── app/                        # 주요 애플리케이션 코드
│   ├── main.py                 # 애플리케이션의 진입점
├── configs/                    # 설정 파일
├── deploy/                     # 배포 관련 파일
├── .github/                    # GitHub 워크플로우 및 CI/CD 구성
├── pyproject.toml              # Poetry 의존성 관리
├── poetry.lock                 # 의존성 잠금 파일
└── README.md                   # README 파일
```

## 코딩 스타일 가이드라인
1. **PEP 8 준수**: Python 공식 스타일 가이드를 따릅니다.
2. **의미 있는 이름 사용**: 변수, 함수, 클래스에 설명적인 이름을 사용합니다.
   - 함수와 변수는 snake_case를 사용합니다.
   - 클래스는 PascalCase를 사용합니다.
   - 상수는 UPPER_CASE를 사용합니다.
3. **문서화**: 모든 공개 API, 함수, 클래스에 docstring을 작성합니다.
   - 함수의 목적, 매개변수, 반환 값을 설명합니다.
   - 복잡한 로직에는 인라인 주석을 추가합니다.
4. **타입 힌트 사용**: 모든 함수와 메서드에 타입 힌트를 추가합니다.
5. **함수 크기 제한**: 함수는 한 가지 작업만 수행하도록 설계하고 크기를 제한합니다.
6. **DRY(Don't Repeat Yourself) 원칙**: 코드 중복을 방지합니다.
7. **간결성 유지**: 복잡한 단일행보다 명확성을 우선시합니다.
8. **예외 처리**: 구체적인 예외를 잡고 처리합니다.
9. **로깅**: print 구문 사용을 지양하고, logging을 사용을 우선시합니다.
10. **설정파일 사용**: 변경이 가능한 각종 설정들은 별도의 파일에 저장하여 사용합니다.
11. **공통기능 모듈화**: 공통으로 사용하는 기능은 별도의 클래스와 함수로 모듈화합니다.
12. **비동기 사용**: 성능 향상을 위해 가능하다면 비동기로 구현합니다.

## 테스트
- pytest를 사용하여 단위 테스트를 작성합니다.
- 모든 핵심 기능에 테스트를 작성합니다.
- 테스트 코드 커버리지를 높게 유지합니다.
- 테스트는 독립적이고 반복 가능해야 합니다.

## 패키지 구조
- 패키지와 모듈의 목적이 명확히 구분되어야 합니다.
- `__init__.py` 파일을 사용하여 패키지 인터페이스를 명확히 정의합니다.
- 순환 의존성을 피합니다.
- 상대 임포트보다 절대 임포트를 선호합니다.

## 성능 고려 사항
- 리스트 내포, 제너레이터 표현식을 적절히 활용합니다.
- 대규모 데이터 처리 시 제너레이터를 사용하여 메모리 효율성을 높입니다.
- 성능이 중요한 부분은 프로파일링을 통해 최적화합니다.

## 보안 관행
- 민감한 정보는 환경 변수나 안전한 구성 파일에 저장합니다.
- 사용자 입력은 항상 검증합니다.
- 보안 관련 라이브러리는 최신 버전을 유지합니다.

## 코드 리뷰 기준
- 코드 가독성과 유지보수성
- 테스트 품질 및 커버리지
- 잠재적 버그 및 에지 케이스 처리
- 성능 고려 사항
- 보안 취약점
- 문서화 품질

## API 설계
- JWT를 사용한 인증 시스템을 구현합니다.
- API 키와 시크릿을 HTTP 헤더를 통해 검증합니다.
- CORS를 적절히 설정하여 보안을 강화합니다.
- API 버전 관리를 URL 경로를 통해 수행합니다(예: /api/v1, /api/v2).

## 비동기 프로그래밍
- FastAPI의 비동기 기능을 최대한 활용합니다.
- asyncpg를 사용한 비동기 데이터베이스 연결을 구현합니다.
- aioredis를 사용한 비동기 캐싱을 구현합니다.

## 캐싱 전략
- Redis를 사용하여 자주 접근하는 데이터를 캐싱합니다.
- LRU 캐시 메커니즘을 적용하여 메모리 내 캐싱을 사용합니다.
- 캐시 만료 시간을 적절히 설정하여 데이터 신선도를 유지합니다.

## 모니터링 및 로깅
- 통합된 로깅 시스템을 사용합니다.
- ddtrace를 사용하여 애플리케이션 성능을 모니터링합니다.
- 요청 처리 시간을 헤더에 기록하여 성능을 추적합니다.

이 규칙을 따르면 일관되고 유지보수하기 쉬운 Python 코드를 작성할 수 있습니다.